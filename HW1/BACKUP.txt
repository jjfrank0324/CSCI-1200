#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stdio.h>      /* printf, fgets */
#include <stdlib.h>
using namespace std;

int main(int argc, char* argv[])
{
    std::string order = argv[4];
  //  std::cout<<order<<std::endl;

    int Len = atoi(argv[3])+4;
    std::string Head(Len, '-');
  //  std::cout<<Head<<std::endl;

    ofstream OUT;
    OUT.open(argv[2]);
    OUT<<Head<<"\n";

    ifstream infile;
    std::string txt;
    std::string t1;
    infile.open(argv[1]);
    vector<std::string> words_L;
    while(infile>>t1)             //?????,???????
{
    words_L.push_back(t1);
}


if (order == "flush_left")
{
  int total_L = 4;
  std::string Line ;

  for (int i = 0; i<words_L.size();i++)
  {
    if ((4+Line.size()+words_L[i].size())<Len)
    {
      Line += (words_L[i]+' ');
      std::cout<<Line<<"|||||"<<words_L[i]<<std::endl;
    }
    else
    {
      //std::cout<<Line.size()<<"SIZE"<<std::;
      std::string Space (Len-4-Line.size(),' ');
      Line += Space;
      OUT<<"| "<<Line<<" |"<<"\n";
      Line=words_L[i]+' ';
    }
  }
  std::string Space (Len-4-Line.size(),' ');
  Line += Space;
  OUT<<"| "<<Line<<" |"<<"\n";
}
//  std::cout<<"L";

if (order == "flush_right")
{
  int total_L = 4;
  std::string Line ;

  for (int i = 0; i<words_L.size();i++)
  {
    if ((4+Line.size()+words_L[i].size())<Len)
    {
      Line += (words_L[i]+' ');
      std::cout<<Line<<"|||||"<<words_L[i]<<std::endl;
    }
    else
    {
      //std::cout<<Line.size()<<"SIZE"<<std::;
      std::string Space (Len-4-Line.size()+1,' ');
      Line = Space+Line;
      OUT<<"| "<<Line<<"|"<<"\n";
      Line=words_L[i]+' ';
    }
  }
  std::string Space (Len-4-Line.size()+1,' ');
  Line = Space+Line;
  OUT<<"| "<<Line<<"|"<<"\n";
  //  std::cout<<"R";
}

if (order == "full_justify")
{ std::string Line;
  vector<std::string> words;
  int sentence_L= 0;
  for (int i = 0; i<words_L.size();i++)
  { if(words_L[i].size()> Len-4)
    {
      int counting = 0;
      std::string Line;
      for(int x=0;x<words_L[i].size();x++)
      {
        if (counting<(Len-4-1))
        {
          Line += words_L[i][x];
        }
        else
        {
          Line+='-';
          OUT<<"| "<<Line<<" |"<<"\n";
          counting = 0;
          Line = "";
        }
      }
      std::cout<<"ANYTHING HERE";
      // std::string space(Len-4-Line.size(),' ');
      // Line+= space;
      //OUT<<"| "<<Line<<" |"<<"\n";
    }

    else{
    if ((4+  sentence_L+words_L[i].size())<Len)
    {
      words.push_back(words_L[i]);
      sentence_L += (words_L[i].size()+1);
      std::cout<<words_L[i]<<sentence_L<<std::endl;
    }
    else
    {
      std::cout<<"vertorSIZE words size"<<words.size()<<std::endl;
      int Space_num = (Len - 4 - sentence_L+words.size())/(words.size()-1);
      std::cout<<Len<<'@'<<sentence_L<<'@'<<words.size()<<'@'<<std::endl;
      std::cout<<"Here is Space"<<Space_num<<std::endl;
      for (int j = 0; j< words.size();j++)
      {if (j==0)
        { std::string Space(16-(Space_num*(words.size()-1))+words.size()-sentence_L ,' ');
          words[j]+=Space;}
      if (j==(words.size()-1))
      {
        std::string Space(1,' ');
        words[j]+= Space;
      }
       else{
         std::string Space(Space_num,' ');
         words[j]+= Space;
       }
      }

      for (int o = 0; o< words.size();o++)
      { Line += words[o];}
      std::cout<<"here is the line "<<Line<<std::endl;
      OUT<<"| "<<Line<<"|"<<"\n";
      words.clear();
      std::cout<<"vertorSIZE words size after "<<words.size()<<std::endl;
      words.push_back(words_L[i]);
      Line="";
      sentence_L = (words_L[i].size()+1);
      Space_num=0;
      }
    }
  }
  for (int j = 0; j<words.size();j++)
  {Line += (words[j]+' ') ;}
  int NUM = 20 - Line.size()-4; int U=0;
  while(U<NUM)
  {
    Line += " ";
    U+=1;
  }
std::cout<<Line<<std::endl;
OUT<<"| "<<Line<<" |"<<"\n";
}


  OUT<<Head;
//std::cout<<Head<<std::endl;
infile.close();
OUT.close();
return 0;
}
